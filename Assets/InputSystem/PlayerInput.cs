//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputSystem/PlayerInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7cfc140d-ca2c-4569-963b-95f9fdaa2cd6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""63eaed8a-b1b9-4c13-ad5c-2c97bf42d106"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""353612a9-88f8-4c27-925a-90d588d96082"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""6a96e5c9-075b-41d6-a9c6-ff31feaabffd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow"",
                    ""id"": ""854b5d53-6202-4312-ba89-93e6328a4d0c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""caa3bf3d-71bd-4d2a-9e4c-9b71fbd093a8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""15526cad-b5bf-4431-b2d1-0e37ac7f7f62"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c2e52a43-a87e-488c-8b0c-da6d1a51226f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1675d0c9-a63d-4b47-92ce-cae11191114a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be6fdd52-f7ba-4c58-8e0c-cca3e81c53a3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b06ce23-eae0-4767-84e5-6bfc1de70d7b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2e6674d-ceac-4477-a158-e2f166c81fef"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchMode"",
            ""id"": ""e142499f-d016-4315-a8c5-9a3f1230dd8c"",
            ""actions"": [
                {
                    ""name"": ""SwitchModeStart"",
                    ""type"": ""Button"",
                    ""id"": ""ec5f559a-98e6-436d-b349-67a679262710"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCircle"",
                    ""type"": ""Button"",
                    ""id"": ""6ab261b8-5b0a-4174-b9be-b84208dd85ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTriangle"",
                    ""type"": ""Button"",
                    ""id"": ""35edaca5-0bdc-4d33-a44f-f3d31bb105af"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectStar"",
                    ""type"": ""Button"",
                    ""id"": ""62a768fe-b2ab-4b8a-8c66-66e6e29ea27a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSquare"",
                    ""type"": ""Button"",
                    ""id"": ""539faab6-dd23-412b-92fe-0a28ccfc15e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ace45573-8401-4c92-bdc4-ae86b281bee6"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchModeStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f0e4606-0d39-4ba2-ae19-91b1d4a43b16"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCircle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1797d653-d680-40dc-8af1-bf15a581b24a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTriangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36f837d3-6066-47a1-af36-9cc223f0336b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectStar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae54379a-e77f-409a-adfe-a19bb3e0f899"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSquare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchMouse"",
            ""id"": ""f4299fd9-a1d8-49bd-b72f-412f1cc3c27b"",
            ""actions"": [
                {
                    ""name"": ""SwitchModeStart"",
                    ""type"": ""Button"",
                    ""id"": ""6ce82029-21e0-42ea-917c-8b174cc1059d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchModeEnd"",
                    ""type"": ""Button"",
                    ""id"": ""a14b24db-33fc-406a-b3ed-2fe2686ff4f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""b6f1289f-d360-482f-8bf6-f850973ab283"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ca72cd6-61bf-41b3-994b-90a75ce79a72"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchModeStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e491515c-2ba4-430c-a73f-6e1c4aba0910"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchModeEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6d65335-f2e9-468f-a1b0-0a789d125d36"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        // SwitchMode
        m_SwitchMode = asset.FindActionMap("SwitchMode", throwIfNotFound: true);
        m_SwitchMode_SwitchModeStart = m_SwitchMode.FindAction("SwitchModeStart", throwIfNotFound: true);
        m_SwitchMode_SelectCircle = m_SwitchMode.FindAction("SelectCircle", throwIfNotFound: true);
        m_SwitchMode_SelectTriangle = m_SwitchMode.FindAction("SelectTriangle", throwIfNotFound: true);
        m_SwitchMode_SelectStar = m_SwitchMode.FindAction("SelectStar", throwIfNotFound: true);
        m_SwitchMode_SelectSquare = m_SwitchMode.FindAction("SelectSquare", throwIfNotFound: true);
        // SwitchMouse
        m_SwitchMouse = asset.FindActionMap("SwitchMouse", throwIfNotFound: true);
        m_SwitchMouse_SwitchModeStart = m_SwitchMouse.FindAction("SwitchModeStart", throwIfNotFound: true);
        m_SwitchMouse_SwitchModeEnd = m_SwitchMouse.FindAction("SwitchModeEnd", throwIfNotFound: true);
        m_SwitchMouse_MouseDelta = m_SwitchMouse.FindAction("MouseDelta", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInput.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SwitchMode.enabled, "This will cause a leak and performance issues, PlayerInput.SwitchMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SwitchMouse.enabled, "This will cause a leak and performance issues, PlayerInput.SwitchMouse.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Dash;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Player_Move;
        /// <summary>
        /// Provides access to the underlying input action "Player/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        /// <summary>
        /// Provides access to the underlying input action "Player/Dash".
        /// </summary>
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // SwitchMode
    private readonly InputActionMap m_SwitchMode;
    private List<ISwitchModeActions> m_SwitchModeActionsCallbackInterfaces = new List<ISwitchModeActions>();
    private readonly InputAction m_SwitchMode_SwitchModeStart;
    private readonly InputAction m_SwitchMode_SelectCircle;
    private readonly InputAction m_SwitchMode_SelectTriangle;
    private readonly InputAction m_SwitchMode_SelectStar;
    private readonly InputAction m_SwitchMode_SelectSquare;
    /// <summary>
    /// Provides access to input actions defined in input action map "SwitchMode".
    /// </summary>
    public struct SwitchModeActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SwitchModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SwitchMode/SwitchModeStart".
        /// </summary>
        public InputAction @SwitchModeStart => m_Wrapper.m_SwitchMode_SwitchModeStart;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMode/SelectCircle".
        /// </summary>
        public InputAction @SelectCircle => m_Wrapper.m_SwitchMode_SelectCircle;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMode/SelectTriangle".
        /// </summary>
        public InputAction @SelectTriangle => m_Wrapper.m_SwitchMode_SelectTriangle;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMode/SelectStar".
        /// </summary>
        public InputAction @SelectStar => m_Wrapper.m_SwitchMode_SelectStar;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMode/SelectSquare".
        /// </summary>
        public InputAction @SelectSquare => m_Wrapper.m_SwitchMode_SelectSquare;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SwitchMode; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SwitchModeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SwitchModeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SwitchModeActions" />
        public void AddCallbacks(ISwitchModeActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchModeActionsCallbackInterfaces.Add(instance);
            @SwitchModeStart.started += instance.OnSwitchModeStart;
            @SwitchModeStart.performed += instance.OnSwitchModeStart;
            @SwitchModeStart.canceled += instance.OnSwitchModeStart;
            @SelectCircle.started += instance.OnSelectCircle;
            @SelectCircle.performed += instance.OnSelectCircle;
            @SelectCircle.canceled += instance.OnSelectCircle;
            @SelectTriangle.started += instance.OnSelectTriangle;
            @SelectTriangle.performed += instance.OnSelectTriangle;
            @SelectTriangle.canceled += instance.OnSelectTriangle;
            @SelectStar.started += instance.OnSelectStar;
            @SelectStar.performed += instance.OnSelectStar;
            @SelectStar.canceled += instance.OnSelectStar;
            @SelectSquare.started += instance.OnSelectSquare;
            @SelectSquare.performed += instance.OnSelectSquare;
            @SelectSquare.canceled += instance.OnSelectSquare;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SwitchModeActions" />
        private void UnregisterCallbacks(ISwitchModeActions instance)
        {
            @SwitchModeStart.started -= instance.OnSwitchModeStart;
            @SwitchModeStart.performed -= instance.OnSwitchModeStart;
            @SwitchModeStart.canceled -= instance.OnSwitchModeStart;
            @SelectCircle.started -= instance.OnSelectCircle;
            @SelectCircle.performed -= instance.OnSelectCircle;
            @SelectCircle.canceled -= instance.OnSelectCircle;
            @SelectTriangle.started -= instance.OnSelectTriangle;
            @SelectTriangle.performed -= instance.OnSelectTriangle;
            @SelectTriangle.canceled -= instance.OnSelectTriangle;
            @SelectStar.started -= instance.OnSelectStar;
            @SelectStar.performed -= instance.OnSelectStar;
            @SelectStar.canceled -= instance.OnSelectStar;
            @SelectSquare.started -= instance.OnSelectSquare;
            @SelectSquare.performed -= instance.OnSelectSquare;
            @SelectSquare.canceled -= instance.OnSelectSquare;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SwitchModeActions.UnregisterCallbacks(ISwitchModeActions)" />.
        /// </summary>
        /// <seealso cref="SwitchModeActions.UnregisterCallbacks(ISwitchModeActions)" />
        public void RemoveCallbacks(ISwitchModeActions instance)
        {
            if (m_Wrapper.m_SwitchModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SwitchModeActions.AddCallbacks(ISwitchModeActions)" />
        /// <seealso cref="SwitchModeActions.RemoveCallbacks(ISwitchModeActions)" />
        /// <seealso cref="SwitchModeActions.UnregisterCallbacks(ISwitchModeActions)" />
        public void SetCallbacks(ISwitchModeActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SwitchModeActions" /> instance referencing this action map.
    /// </summary>
    public SwitchModeActions @SwitchMode => new SwitchModeActions(this);

    // SwitchMouse
    private readonly InputActionMap m_SwitchMouse;
    private List<ISwitchMouseActions> m_SwitchMouseActionsCallbackInterfaces = new List<ISwitchMouseActions>();
    private readonly InputAction m_SwitchMouse_SwitchModeStart;
    private readonly InputAction m_SwitchMouse_SwitchModeEnd;
    private readonly InputAction m_SwitchMouse_MouseDelta;
    /// <summary>
    /// Provides access to input actions defined in input action map "SwitchMouse".
    /// </summary>
    public struct SwitchMouseActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SwitchMouseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SwitchMouse/SwitchModeStart".
        /// </summary>
        public InputAction @SwitchModeStart => m_Wrapper.m_SwitchMouse_SwitchModeStart;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMouse/SwitchModeEnd".
        /// </summary>
        public InputAction @SwitchModeEnd => m_Wrapper.m_SwitchMouse_SwitchModeEnd;
        /// <summary>
        /// Provides access to the underlying input action "SwitchMouse/MouseDelta".
        /// </summary>
        public InputAction @MouseDelta => m_Wrapper.m_SwitchMouse_MouseDelta;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SwitchMouse; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SwitchMouseActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SwitchMouseActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SwitchMouseActions" />
        public void AddCallbacks(ISwitchMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchMouseActionsCallbackInterfaces.Add(instance);
            @SwitchModeStart.started += instance.OnSwitchModeStart;
            @SwitchModeStart.performed += instance.OnSwitchModeStart;
            @SwitchModeStart.canceled += instance.OnSwitchModeStart;
            @SwitchModeEnd.started += instance.OnSwitchModeEnd;
            @SwitchModeEnd.performed += instance.OnSwitchModeEnd;
            @SwitchModeEnd.canceled += instance.OnSwitchModeEnd;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SwitchMouseActions" />
        private void UnregisterCallbacks(ISwitchMouseActions instance)
        {
            @SwitchModeStart.started -= instance.OnSwitchModeStart;
            @SwitchModeStart.performed -= instance.OnSwitchModeStart;
            @SwitchModeStart.canceled -= instance.OnSwitchModeStart;
            @SwitchModeEnd.started -= instance.OnSwitchModeEnd;
            @SwitchModeEnd.performed -= instance.OnSwitchModeEnd;
            @SwitchModeEnd.canceled -= instance.OnSwitchModeEnd;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SwitchMouseActions.UnregisterCallbacks(ISwitchMouseActions)" />.
        /// </summary>
        /// <seealso cref="SwitchMouseActions.UnregisterCallbacks(ISwitchMouseActions)" />
        public void RemoveCallbacks(ISwitchMouseActions instance)
        {
            if (m_Wrapper.m_SwitchMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SwitchMouseActions.AddCallbacks(ISwitchMouseActions)" />
        /// <seealso cref="SwitchMouseActions.RemoveCallbacks(ISwitchMouseActions)" />
        /// <seealso cref="SwitchMouseActions.UnregisterCallbacks(ISwitchMouseActions)" />
        public void SetCallbacks(ISwitchMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SwitchMouseActions" /> instance referencing this action map.
    /// </summary>
    public SwitchMouseActions @SwitchMouse => new SwitchMouseActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Dash" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDash(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SwitchMode" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SwitchModeActions.AddCallbacks(ISwitchModeActions)" />
    /// <seealso cref="SwitchModeActions.RemoveCallbacks(ISwitchModeActions)" />
    public interface ISwitchModeActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchModeStart" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchModeStart(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectCircle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectCircle(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectTriangle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectTriangle(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectStar" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectStar(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectSquare" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectSquare(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SwitchMouse" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SwitchMouseActions.AddCallbacks(ISwitchMouseActions)" />
    /// <seealso cref="SwitchMouseActions.RemoveCallbacks(ISwitchMouseActions)" />
    public interface ISwitchMouseActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchModeStart" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchModeStart(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchModeEnd" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchModeEnd(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseDelta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseDelta(InputAction.CallbackContext context);
    }
}
